name: zz-r-deploy-solution

on:
  workflow_call:
    inputs:
      solution_name:
        required: true
        type: string
      environment:
        required: true
        type: string
      unmanaged:
        required: false
        type: string
        default: false
      tag:
        required: false
        type: string

    secrets:
      environment_url:
        required: true
      tenant_id:
        required: true
      client_id:
        required: true
      client_secret:
        required: true
      secrets:
        required: true

jobs:
  deploy-solution:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      # Solutions cannot be imported in parallel, so we queue
      - uses: ahmadnassri/action-workflow-queue@v1

      - uses: actions/checkout@v2
        if: ${{ inputs.environment == 'prod' }}

      - run: |
          git fetch --all --tags
          $commit = git rev-list -n 1 tags/${{ inputs.tag }}
          echo "commit=$commit" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
        shell: pwsh
        if: ${{ inputs.environment == 'prod' }}

      - name: download prod artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: build-deploy-solution.yml
          commit: ${{ env.commit }}
          path: ${{ runner.temp }}/${{ inputs.solution_name }}
        if: ${{ inputs.environment == 'prod' }}

      - uses: actions/download-artifact@v2
        with:
          path: ${{ runner.temp }}/${{ inputs.solution_name }}
        if: ${{ inputs.environment != 'prod' }}

      - uses: Firenza/secrets-to-env@v1.1.0
        with:
            secrets: ${{ secrets.secrets }}
            secret_filter_regex: DKDT_*

      - uses: cschleiden/replace-tokens@v1
        with:
          files: '["${{ runner.temp }}/${{ inputs.solution_name }}/artifact/deploymentSettings.json"]'
      
      - run: |
          Get-Content "${{ runner.temp }}/${{ inputs.solution_name }}/artifact/deploymentSettings.json"
        shell: pwsh

      - name: get solution zip
        id: get-solution-zip
        shell: pwsh
        run: |
          # unmanaged means we are targeting a dev environment
          if ([System.Convert]::ToBoolean("${{ inputs.unmanaged }}")) {
            $files = Get-ChildItem -Path "${{ runner.temp }}/${{ inputs.solution_name }}/artifact" | Where-Object{$_.Name.EndsWith('.zip') -and !$_.Name.EndsWith('_managed.zip')}
          }
          else {
            $files = Get-ChildItem -Path "${{ runner.temp }}/${{ inputs.solution_name }}/artifact" | Where-Object{$_.Name.EndsWith('_managed.zip')}
          }
          
          $solutionZip = $files[0].Name
          echo "::set-output name=solution_zip::$solutionZip"      

      - name: import solution to environment
        uses: microsoft/powerplatform-actions/import-solution@main #using @main for now because deployment-settings-file isn't officially released, therefore won't be in v0
        with:
          environment-url: ${{ secrets.environment_url }}
          tenant-id: ${{ secrets.tenant_id }}
          app-id: ${{ secrets.client_id }}
          client-secret: ${{ secrets.client_secret }}
          solution-file: ${{ runner.temp }}/${{ inputs.solution_name }}/artifact/${{ steps.get-solution-zip.outputs.solution_zip }}
          force-overwrite: true
          deployment-settings-file: ${{ runner.temp }}/${{ inputs.solution_name }}/artifact/deploymentSettings.json

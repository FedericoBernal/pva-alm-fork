name: deploy-solution

on:
  workflow_call:
    inputs:
      solution_name:
        required: true
        type: string
      environment:
        required: true
        type: string
      tag:
        required: false
        type: string

    secrets:
      environment_url:
        required: true
      tenant_id:
        required: true
      client_id:
        required: true
      client_secret:
        required: true

jobs:
  deploy-solution:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    env:
      dkdt_PVAMSNWeather: ${{ secrets.PR_DKDT_PVAMSNWEATHER }}

    steps:
      - run: echo ${{ inputs.environment }}

      - uses: actions/checkout@v2
        if: ${{ inputs.environment == 'prod' }}

      - run: |
          git fetch --all --tags
          $commit = git rev-list -n 1 tags/${{ github.event.inputs.tag }}
          echo "commit=$commit" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
        shell: pwsh
        if: ${{ inputs.environment == 'prod' }}

      - name: download prod artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: ${{ inputs.solution_name }}-build-deploy.yml
          commit: ${{ env.commit }}
          path: ${{ runner.temp }}
        if: ${{ inputs.environment == 'prod' }}

      - uses: actions/download-artifact@v2
        with:
          name: ${{ inputs.solution_name }}
          path: ${{ runner.temp }}/${{ inputs.solution_name }}
        if: ${{ inputs.environment != 'prod' }}

      - uses: cschleiden/replace-tokens@v1
        with:
          files: '["src/${{ inputs.solution_name }}/deploymentSettings.json"]'

      - name: show deploymentSettings.json
        shell: pwsh
        run: |
          Write-Host Get-Location
          #Get-Content src/${{ inputs.solution_name }}/deploymentSettings.json

      - id: get-solution-zip
        shell: pwsh
        run: |
          $files = Get-ChildItem -Path "${{ runner.temp }}/${{ inputs.solution_name }}" | Where-Object{$_.Name.startsWith('${{ inputs.solution_name }}')}
          $solutionZip = $files[0].Name
          echo "::set-output name=solution_zip::$solutionZip"

      - name: import solution to environment
        uses: microsoft/powerplatform-actions/import-solution@main #using @main for now because deployment-settings-file isn't officially released, therefore won't be in v0 
        with:
          environment-url: ${{ secrets.environment_url }}
          tenant-id: ${{ secrets.tenant_id }}
          app-id: ${{ secrets.client_id }}
          client-secret: ${{ secrets.client_secret }}
          solution-file: ${{ runner.temp }}/${{ inputs.solution_name }}/${{ steps.get-solution-zip.outputs.solution_zip }}
          force-overwrite: true
          #deployment-settings-file: src/${{ inputs.solution_name }}/deploymentSettings.json
